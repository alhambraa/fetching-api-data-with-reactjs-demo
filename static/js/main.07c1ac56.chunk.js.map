{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","prettyCurrency","crr","action","fixedCrr","toFixed","toString","length","createTable","rates","state","ratesArr","keys","map","i","table","children","displayedCurrencies","key","hasOwnProperty","includes","push","react_default","a","createElement","error","isLoaded","_this2","fetch","then","res","json","result","setState","_this$state","message","className","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNA+GeA,qBA1Gb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA2BRQ,eAAiB,SAACC,EAAKC,GACN,IAAXA,EACFD,EAAa,IAANA,EAAa,IACA,IAAXC,IACTD,EAAa,GAANA,EAAY,KAKrB,IADA,IAAIE,EAAWF,EAAIG,QAAQ,GAAGC,WACvBF,EAASG,OAAS,GACvBH,EAAW,IAAMA,EAGnB,OAAOA,GAzCUV,EA4CnBc,YAAc,WACZ,IAAMC,EAAQf,EAAKgB,MACfC,EAAWhB,OAAOiB,KAAKH,GAAOI,IAAI,SAAAC,GAAC,OAAIL,EAAMK,KAAI,GACjDC,EAAQ,GACRC,EAAW,GACXC,EAAsB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAG9D,IAAK,IAAIC,KAAOP,EACVA,EAASQ,eAAeD,IAAQD,EAAoBG,SAASF,IAC/DF,EAASK,KACPC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,UAAK9B,EAAKO,eAAeU,EAASO,GAAM,IACxCI,EAAAC,EAAAC,cAAA,UAAK9B,EAAKO,eAAeU,EAASO,KAClCI,EAAAC,EAAAC,cAAA,UAAK9B,EAAKO,eAAeU,EAASO,GAAM,MAOhD,OAFAH,EAAMM,KAAKC,EAAAC,EAAAC,cAAA,aAAQR,IAEZD,GAhEPrB,EAAKgB,MAAQ,CACXe,MAAO,KACPC,UAAU,EACVjB,MAAO,IALQf,mFASC,IAAAiC,EAAA9B,KAClB+B,MAAM,mDACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAAAG,GACEL,EAAKM,SAAS,CACZP,UAAU,EACVjB,MAAOuB,EAAOvB,SAGlB,SAAAgB,GACEE,EAAKM,SAAS,CACZP,UAAU,EACVD,6CA+CD,IAAAS,EACqBrC,KAAKa,MAAzBe,EADDS,EACCT,MAAOC,EADRQ,EACQR,SAEf,OAAID,EACKH,EAAAC,EAAAC,cAAA,oBAAYC,EAAMU,SACfT,EAIRJ,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKY,UAAU,YACbd,EAAAC,EAAAC,cAAA,SAAOY,UAAU,iBACfd,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,uBAGH3B,KAAKW,eAERc,EAAAC,EAAAC,cAAA,kCAEEF,EAAAC,EAAAC,cAAA,WAFF,wBAGEF,EAAAC,EAAAC,cAAA,KAAGa,KAAK,gCAAR,gCAHF,kBAhBCf,EAAAC,EAAAC,cAAA,gCA5EKc,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.07c1ac56.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      rates: {}\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.exchangeratesapi.io/latest?base=GBP\") // data source is an object, not an array.\n      .then(res => res.json()) // Short typo for response.\n      .then(\n        result => {\n          this.setState({\n            isLoaded: true,\n            rates: result.rates\n          });\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  }\n\n  prettyCurrency = (crr, action) => {\n    if (action === 0) {\n      crr = (crr * 102) / 100;\n    } else if (action === 1) {\n      crr = (crr * 98) / 100;\n    } else {\n      // Do nothing...\n    }\n    var fixedCrr = crr.toFixed(4).toString();\n    while (fixedCrr.length < 8) {\n      fixedCrr = \"0\" + fixedCrr;\n    }\n\n    return fixedCrr;\n  };\n\n  createTable = () => {\n    const rates = this.state;\n    let ratesArr = Object.keys(rates).map(i => rates[i])[2];\n    let table = [];\n    let children = [];\n    let displayedCurrencies = [\"RUB\", \"CAD\", \"USD\", \"CHF\", \"JPY\", \"EUR\"];\n\n    // The following loop is used to create inner structure (children) of the table.\n    for (var key in ratesArr) {\n      if (ratesArr.hasOwnProperty(key) && displayedCurrencies.includes(key)) {\n        children.push(\n          <tr>\n            <td>{key}</td>\n            <td>{this.prettyCurrency(ratesArr[key], 0)}</td>\n            <td>{this.prettyCurrency(ratesArr[key])}</td>\n            <td>{this.prettyCurrency(ratesArr[key], 1)}</td>\n          </tr>\n        );\n      }\n    }\n    table.push(<tbody>{children}</tbody>); // We create the parent tbody tags and add the inner loop (children).\n\n    return table;\n  };\n\n  render() {\n    const { error, isLoaded } = this.state;\n\n    if (error) {\n      return <div>Oops: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <main>\n          <div className=\"App-body\">\n            <table className=\"currencyTable\">\n              <thead>\n                <tr>\n                  <th>&nbsp;</th>\n                  <th>WE BUY</th>\n                  <th>EXCHANGE RATE</th>\n                  <th>WE SELL</th>\n                </tr>\n              </thead>\n              {this.createTable()}\n            </table>\n            <p>\n              * base currency is GBP\n              <br />* As for the API,&nbsp;\n              <a href=\"https://exchangeratesapi.io/\">\n                https://exchangeratesapi.io/\n              </a>\n              &nbsp;is used.\n            </p>\n          </div>\n        </main>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}